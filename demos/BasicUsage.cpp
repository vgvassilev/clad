//--------------------------------------------------------------------*- C++ -*-
// clad - The C++ Clang-based Automatic Differentiator
//
// A demo, describing a basic usage of the tool.
//
// author:  Vassil Vassilev <vvasilev-at-cern.ch>
//----------------------------------------------------------------------------//

// To run the demo please type:
// path/to/clang  -Xclang -add-plugin -Xclang clad -Xclang -load -Xclang \
// path/to/libclad.so  -I../include/ -x c++ -std=c++11 BasicUsage.cpp
//
// A typical invocation would be:
// ../../../../obj/Debug+Asserts/bin/clang  -Xclang -add-plugin -Xclang clad \
// -Xclang -load -Xclang ../../../../obj/Debug+Asserts/lib/libclad.dylib     \
// -I../include/ -x c++ -std=c++11 BasicUsage.cpp

// Necessary for clad to work include
#include "clad/Differentiator/Differentiator.h"

double pow2(double x) { return x * x; }

// The body will be generated by clad:
double pow2_darg0(double);

int main() {
  // Differentiate pow2. Clad will define a function named
  // pow2_dx(double) with the derivative, ready to be called.

  // cladPow2 is of type CladFunction, which is a tiny wrapper over the derived
  // function pointer.
  auto cladPow2 = clad::differentiate(pow2, 0);

  // Function execution can happen in 3 ways:

  // 1) Using CladFunction::execute method.
  int pow1stOrderDerivative = cladPow2.execute(1);
  printf("Result is %d\n", pow1stOrderDerivative);

  // 2) Using the function pointer.
  auto cladPow2FnPtr = cladPow2.getFunctionPtr();
  pow1stOrderDerivative = cladPow2FnPtr(2);
  printf("Result is %d\n", pow1stOrderDerivative);

  // 3) Using direct function access through fwd declaration.
  pow1stOrderDerivative = pow2_darg0(4);
  printf("Result is %d\n", pow1stOrderDerivative);

  // FOR MORE COMPLEX USAGE SCENARIOS, SEE THE REST OF THE DEMOS. THANK YOU!
  return 0;
}

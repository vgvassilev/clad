name: Main
on:
  push:
    branches:
      - master
      - coverity_scan
  pull_request:
    branches:
      - master
      - coverity_scan

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:

        include:
          - name: osx-clang-runtime5
            os: macos-latest
            compiler: clang
            clang-runtime: '5.0'

          - name: osx-clang-runtime6
            os: macos-latest
            compiler: clang
            clang-runtime: '6.0'

          - name: osx-clang-runtime7
            os: macos-latest
            compiler: clang
            clang-runtime: '7'

          - name: osx-clang-runtime8
            os: macos-latest
            compiler: clang
            clang-runtime: '8'

          - name: osx-clang-runtime9
            os: macos-latest
            compiler: clang
            clang-runtime: '9'

          - name: osx-clang-runtime10
            os: macos-latest
            compiler: clang
            clang-runtime: '10'

          - name: osx-clang-runtime11
            os: macos-latest
            compiler: clang
            clang-runtime: '11'

          - name: osx-clang-runtime12
            os: macos-latest
            compiler: clang
            clang-runtime: '12'

          - name: ubu18-gcc5-runtime8
            os: ubuntu-18.04
            compiler: gcc-5
            clang-runtime: '8'

          - name: ubu18-gcc6-runtime11-analyzers
            os: ubuntu-18.04
            compiler: gcc-6
            clang-runtime: '11'
            coverage: true
            extra_cmake_options: '-DCLAD_ENABLE_BENCHMARKS=On'
            #clang-format: true

          - name: ubu18-gcc6-runtime11-coverity
            os: ubuntu-18.04
            compiler: gcc-6
            clang-runtime: '11'
            coverity: true

          - name: ubu18-gcc6-runtime8
            os: ubuntu-18.04
            compiler: gcc-6
            clang-runtime: '8'

          - name: ubu18-gcc8-runtime8
            os: ubuntu-18.04
            compiler: gcc-8
            clang-runtime: '8'

          - name: ubu18-gcc9-runtime8
            os: ubuntu-18.04
            compiler: gcc-9
            clang-runtime: '8'

          - name: ubu18-clang4-runtime8
            os: ubuntu-18.04
            compiler: 'clang-4.0'
            clang-runtime: '8'

          - name: ubu18-clang8-runtime8
            os: ubuntu-18.04
            compiler: clang-8
            clang-runtime: '8'

          - name: ubu18-clang9-runtime8
            os: ubuntu-18.04
            compiler: clang-9
            clang-runtime: '8'

          - name: ubu18-clang10-runtime8
            os: ubuntu-18.04
            compiler: clang-10
            clang-runtime: '8'

          - name: ubu18-gcc5-runtime9
            os: ubuntu-18.04
            compiler: gcc-5
            clang-runtime: '9'

          - name: ubu18-gcc8-runtime9
            os: ubuntu-18.04
            compiler: gcc-8
            clang-runtime: '9'

          - name: ubu18-gcc9-runtime9
            os: ubuntu-18.04
            compiler: gcc-9
            clang-runtime: '9'

          - name: ubu18-clang4-runtime9
            os: ubuntu-18.04
            compiler: 'clang-4.0'
            clang-runtime: '9'

          - name: ubu18-clang8-runtime9
            os: ubuntu-18.04
            compiler: clang-8
            clang-runtime: '9'

          - name: ubu18-clang9-runtime9
            os: ubuntu-18.04
            compiler: clang-9
            clang-runtime: '9'

          - name: ubu18-gcc5-runtime10
            os: ubuntu-18.04
            compiler: gcc-5
            clang-runtime: '10'

          - name: ubu18-gcc8-runtime10
            os: ubuntu-18.04
            compiler: gcc-8
            clang-runtime: '10'

          - name: ubu18-gcc9-runtime10
            os: ubuntu-18.04
            compiler: gcc-9
            clang-runtime: '10'

          - name: ubu18-clang4-runtime10
            os: ubuntu-18.04
            compiler: 'clang-4.0'
            clang-runtime: '10'

          - name: ubu18-clang8-runtime10
            os: ubuntu-18.04
            compiler: clang-8
            clang-runtime: '10'

          - name: ubu18-clang9-runtime10
            os: ubuntu-18.04
            compiler: clang-9
            clang-runtime: '10'

          - name: ubu18-gcc5-runtime11
            os: ubuntu-18.04
            compiler: gcc-5
            clang-runtime: '11'

          - name: ubu18-gcc8-runtime11
            os: ubuntu-18.04
            compiler: gcc-8
            clang-runtime: '11'

          - name: ubu18-gcc9-runtime11
            os: ubuntu-18.04
            compiler: gcc-9
            clang-runtime: '11'

          - name: ubu18-clang4-runtime11
            os: ubuntu-18.04
            compiler: 'clang-4.0'
            clang-runtime: '11'

          - name: ubu18-clang8-runtime11
            os: ubuntu-18.04
            compiler: clang-8
            clang-runtime: '11'

          - name: ubu18-clang9-runtime11
            os: ubuntu-18.04
            compiler: clang-9
            clang-runtime: '11'

          - name: ubu18-gcc5-runtime12
            os: ubuntu-18.04
            compiler: gcc-5
            clang-runtime: '12'

          - name: ubu18-gcc8-runtime12
            os: ubuntu-18.04
            compiler: gcc-8
            clang-runtime: '12'

          - name: ubu18-gcc9-runtime12
            os: ubuntu-18.04
            compiler: gcc-9
            clang-runtime: '12'

          - name: ubu18-clang4-runtime12
            os: ubuntu-18.04
            compiler: 'clang-4.0'
            clang-runtime: '12'

          - name: ubu18-clang8-runtime12
            os: ubuntu-18.04
            compiler: clang-8
            clang-runtime: '12'

          - name: ubu18-clang9-runtime12
            os: ubuntu-18.04
            compiler: clang-9
            clang-runtime: '12'

          - name: ubu18-clang9-runtime10-cuda
            os: ubuntu-18.04
            compiler: clang-9
            clang-runtime: '10'
            cuda: true

          - name: ubu20-gcc7-runtime9
            os: ubuntu-20.04
            compiler: gcc-7
            clang-runtime: '9'

          - name: ubu20-gcc8-runtime9
            os: ubuntu-20.04
            compiler: gcc-8
            clang-runtime: '9'

          - name: ubu20-gcc9-runtime9
            os: ubuntu-20.04
            compiler: gcc-9
            clang-runtime: '9'

          - name: ubu20-clang6-runtime9
            os: ubuntu-20.04
            compiler: 'clang-6.0'
            clang-runtime: '9'

          - name: ubu20-clang8-runtime9
            os: ubuntu-20.04
            compiler: clang-8
            clang-runtime: '9'

          - name: ubu20-clang9-runtime9
            os: ubuntu-20.04
            compiler: clang-9
            clang-runtime: '9'

          - name: ubu20-gcc7-runtime10
            os: ubuntu-20.04
            compiler: gcc-7
            clang-runtime: '10'

          - name: ubu20-gcc8-runtime10
            os: ubuntu-20.04
            compiler: gcc-8
            clang-runtime: '10'

          - name: ubu20-gcc9-runtime10
            os: ubuntu-20.04
            compiler: gcc-9
            clang-runtime: '10'

          - name: ubu20-clang6-runtime10
            os: ubuntu-20.04
            compiler: 'clang-6.0'
            clang-runtime: '10'

          - name: ubu20-clang8-runtime10
            os: ubuntu-20.04
            compiler: clang-8
            clang-runtime: '10'

          - name: ubu20-clang9-runtime10
            os: ubuntu-20.04
            compiler: clang-9
            clang-runtime: '10'

          - name: ubu20-clang10-runtime10
            os: ubuntu-20.04
            compiler: clang-10
            clang-runtime: '10'

          - name: ubu20-gcc7-runtime11
            os: ubuntu-20.04
            compiler: gcc-7
            clang-runtime: '11'

          - name: ubu20-gcc8-runtime11
            os: ubuntu-20.04
            compiler: gcc-8
            clang-runtime: '11'

          - name: ubu20-gcc9-runtime11
            os: ubuntu-20.04
            compiler: gcc-9
            clang-runtime: '11'

          - name: ubu20-clang6-runtime11
            os: ubuntu-20.04
            compiler: 'clang-6.0'
            clang-runtime: '11'

          - name: ubu20-clang8-runtime11
            os: ubuntu-20.04
            compiler: clang-8
            clang-runtime: '11'

          - name: ubu20-clang9-runtime11
            os: ubuntu-20.04
            compiler: clang-9
            clang-runtime: '11'

          - name: ubu20-clang10-runtime11
            os: ubuntu-20.04
            compiler: clang-10
            clang-runtime: '11'

          - name: ubu20-clang11-runtime11
            os: ubuntu-20.04
            compiler: clang-11
            clang-runtime: '11'

          - name: ubu20-gcc7-runtime12
            os: ubuntu-20.04
            compiler: gcc-7
            clang-runtime: '12'

          - name: ubu20-gcc8-runtime12
            os: ubuntu-20.04
            compiler: gcc-8
            clang-runtime: '12'

          - name: ubu20-gcc9-runtime12
            os: ubuntu-20.04
            compiler: gcc-9
            clang-runtime: '12'

          - name: ubu20-clang6-runtime12
            os: ubuntu-20.04
            compiler: 'clang-6.0'
            clang-runtime: '12'

          - name: ubu20-clang8-runtime12
            os: ubuntu-20.04
            compiler: clang-8
            clang-runtime: '12'

          - name: ubu20-clang9-runtime12
            os: ubuntu-20.04
            compiler: clang-9
            clang-runtime: '12'

          - name: ubu20-clang10-runtime12
            os: ubuntu-20.04
            compiler: clang-10
            clang-runtime: '12'

          - name: ubu20-clang11-runtime12
            os: ubuntu-20.04
            compiler: clang-11
            clang-runtime: '12'

          - name: ubu20-clang12-runtime12
            os: ubuntu-20.04
            compiler: clang-12
            clang-runtime: '12'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.6
    - name: Save PR Info
      if: ${{ matrix.coverage == true }}
      run: |
        mkdir -p ./pr
        echo ${{ github.event.number }} > ./pr/NR
        echo ${{ github.repository }} > ./pr/REPO
    - uses: actions/upload-artifact@v2
      if: ${{ matrix.coverage == true }}
      with:
        name: pr
        path: pr/
    - uses: nelonoel/branch-name@v1.0.1
    - name: Setup default Build Type
      run: |
        echo "BUILD_TYPE=Release" >> $GITHUB_ENV
        echo "CODE_COVERAGE=0" >> $GITHUB_ENV
    - name: Download Coverity Build Tool - Linux
      if: ${{ (matrix.coverity == true) && (runner.os == 'Linux') }}
      run: |
        # FIXME: Ideally the check should be in the if: block of the action
        if [ "$BRANCH_NAME" == "coverity_scan" ]; then
          # wget -q https://scan.coverity.com/download/cxx/linux64 --post-data "token=$TOKEN&project=vgvassilev/clad" -O cov-analysis-linux64.tar.gz
          mkdir cov-analysis-linux64
          # tar xzf cov-analysis-linux64.tar.gz --strip 1 -C cov-analysis-linux64
          echo "BUILD_TYPE=Debug" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/cov-analysis-linux64/bin" >> $GITHUB_PATH
        fi
      # env:
      #  TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
    - name: Setup Ubuntu apt sources
      if: runner.os == 'Linux'
      run: |
        curl https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        os_codename="`cat /etc/os-release | grep UBUNTU_CODENAME | cut -d = -f 2`"
        echo "deb https://apt.llvm.org/${os_codename}/ llvm-toolchain-${os_codename}-${{ matrix.clang-runtime }} main" | sudo tee -a /etc/apt/sources.list
        sudo apt update
        if [[ '${{ matrix.clang-runtime }}' == '8' ]]; then
          sudo apt install llvm-${{ matrix.clang-runtime }}-dev clang-${{ matrix.clang-runtime }} libclang-${{ matrix.clang-runtime }}-dev
        else # ==7, >=9
          sudo apt install llvm-${{ matrix.clang-runtime }}-dev llvm-${{ matrix.clang-runtime }}-tools clang-${{ matrix.clang-runtime }} libclang-${{ matrix.clang-runtime }}-dev
        fi
    - name: Setup compiler on Linux
      if: runner.os == 'Linux'
      run: |
        # https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
        vers="${compiler#*-}"
        os_codename="`cat /etc/os-release | grep UBUNTU_CODENAME | cut -d = -f 2`"
        sudo apt update
        if [[ "${{ matrix.compiler }}" == *"gcc"* ]]; then
          sudo apt install -y gcc-${vers} g++-${vers}
          echo "CC=gcc-${vers}" >> $GITHUB_ENV
          echo "CXX=g++-${vers}" >> $GITHUB_ENV
        else
          sudo apt install -y clang-${vers}
          if [[ "$?" != "0" ]]; then
            curl https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            echo "deb https://apt.llvm.org/${os_codename}/ llvm-toolchain-${os_codename}-${vers} main" | sudo tee -a /etc/apt/sources.list
            sudo apt update
            sudo apt install -y clang-${vers}
          fi
          echo "CC=clang-${vers}" >> $GITHUB_ENV
          echo "CXX=clang++-${vers}" >> $GITHUB_ENV
        fi
      env:
        compiler: ${{ matrix.compiler }}
    - name: Setup compiler on macOS
      if: runner.os == 'macOS'
      run: |
        if [[ "${{ matrix.compiler }}" == *"clang"* ]]; then
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        else
          echo "Unsupported compiler - fix YAML file"
        fi
    - name: Setup LLVM/Clang on macOS
      if: runner.os == 'macOS'
      run: |
        # Update openssl on osx because the current one is deprecated by python.
        curl -L https://bootstrap.pypa.io/get-pip.py | sudo python3
        echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        PATH_TO_LLVM_BUILD=/usr/local/opt/llvm@${{ matrix.clang-runtime }}/
        # Package llvm@5 is not supported on brew. We must install it from binary build.
        if [[ '${{ matrix.clang-runtime }}' == '5.0' ]]; then
          PATH_TO_LLVM_BUILD=/usr/local/opt/llvm@5/
          pushd /usr/local/opt
          sudo curl -L https://releases.llvm.org/5.0.2/clang+llvm-5.0.2-x86_64-apple-darwin.tar.xz | sudo xz -d -c | sudo tar -x
          sudo rm -fr /usr/local/clang*
          sudo mv clang+llvm-5.0.2-x86_64-apple-darwin/ llvm@5/
          # Use llvm/llvm@10/llvm@6 Filecheck
          if [[ ! -f $PATH_TO_LLVM_BUILD/bin/FileCheck ]]; then
            if [[ -f /usr/local/opt/llvm/bin/FileCheck ]]; then
              sudo ln -s /usr/local/opt/llvm/bin/FileCheck $PATH_TO_LLVM_BUILD/bin/FileCheck
            elif [[ -f /usr/local/opt/llvm\@10/bin/FileCheck ]]; then
              sudo ln -s /usr/local/opt/llvm\@10/bin/FileCheck $PATH_TO_LLVM_BUILD/bin/FileCheck
            elif [[ -f /usr/local/opt/llvm\@6/bin/FileCheck ]]; then
              sudo ln -s /usr/local/opt/llvm\@6/bin/FileCheck $PATH_TO_LLVM_BUILD/bin/FileCheck
            fi
          fi
          popd
        fi
        # Package llvm@6
        if [[ '${{ matrix.clang-runtime }}' == '6.0' ]]; then
          PATH_TO_LLVM_BUILD=/usr/local/opt/llvm@6/
          pushd /usr/local/opt
          sudo curl -L https://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-apple-darwin.tar.xz | sudo xz -d -c | sudo tar -x
          sudo rm -fr /usr/local/clang*
          sudo mv clang+llvm-6.0.0-x86_64-apple-darwin/ llvm@6/
          # Use llvm/llvm@10/llvm@6 Filecheck
          if [[ ! -f $PATH_TO_LLVM_BUILD/bin/FileCheck ]]; then
            if [[ -f /usr/local/opt/llvm/bin/FileCheck ]]; then
              sudo ln -s /usr/local/opt/llvm/bin/FileCheck $PATH_TO_LLVM_BUILD/bin/FileCheck
            elif [[ -f /usr/local/opt/llvm\@10/bin/FileCheck ]]; then
              sudo ln -s /usr/local/opt/llvm\@10/bin/FileCheck $PATH_TO_LLVM_BUILD/bin/FileCheck
            elif [[ -f /usr/local/opt/llvm\@6/bin/FileCheck ]]; then
              sudo ln -s /usr/local/opt/llvm\@6/bin/FileCheck $PATH_TO_LLVM_BUILD/bin/FileCheck
            fi
          fi
          popd
        fi
        if [[ '${{ matrix.clang-runtime }}' == '7' || '${{ matrix.clang-runtime }}' == '8' || '${{ matrix.clang-runtime }}' == '9' || '${{ matrix.clang-runtime }}' == '11' ]]; then
          brew install llvm@${{ matrix.clang-runtime }}
        fi
        # Package llvm@10 is not supported on brew. FIXME: Remove when official brew package is released.
        if [[ '${{ matrix.clang-runtime }}' == '10' ]]; then
          PATH_TO_LLVM_BUILD=/usr/local/opt/llvm@10/
          pushd /usr/local/opt
          sudo curl -L https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-apple-darwin.tar.xz | sudo xz -d -c | sudo tar -x
          sudo rm -fr /usr/local/clang*
          sudo mv clang+llvm-10.0.0-x86_64-apple-darwin/ llvm@10/
          # Use llvm/llvm@10/llvm@6 Filecheck
          if [[ ! -f $PATH_TO_LLVM_BUILD/bin/FileCheck ]]; then
            if [[ -f /usr/local/opt/llvm/bin/FileCheck ]]; then
              sudo ln -s /usr/local/opt/llvm/bin/FileCheck $PATH_TO_LLVM_BUILD/bin/FileCheck
            elif [[ -f /usr/local/opt/llvm\@10/bin/FileCheck ]]; then
              sudo ln -s /usr/local/opt/llvm\@10/bin/FileCheck $PATH_TO_LLVM_BUILD/bin/FileCheck
            elif [[ -f /usr/local/opt/llvm\@6/bin/FileCheck ]]; then
              sudo ln -s /usr/local/opt/llvm\@6/bin/FileCheck $PATH_TO_LLVM_BUILD/bin/FileCheck
            fi
          fi
          popd
        fi

        # Package llvm@12 == llvm. FIXME: Remove when official brew package llvm@12 is released.
        if [[ '${{ matrix.clang-runtime }}' == '12' ]]; then
          brew install llvm
          export PATH_TO_LLVM_BUILD=/usr/local/opt/llvm@12/
          sudo ln -s /usr/local/opt/llvm /usr/local/opt/llvm@12
        fi

        pip3 install lit # LLVM lit is not part of the llvm releases...

        # We need headers in correct place
        for file in $(xcrun --show-sdk-path)/usr/include/*
        do
          if [ ! -f /usr/local/include/$(basename $file) ]; then
            ln -s $file /usr/local/include/$(basename $file)
          fi
        done
        # We need PATH_TO_LLVM_BUILD later
        echo "PATH_TO_LLVM_BUILD=$PATH_TO_LLVM_BUILD" >> $GITHUB_ENV
    - name: Setup LLVM/Clang on Linux
      if: runner.os == 'Linux'
      run: |
        UNIX_DISTRO=$(lsb_release -rs)
        PATH_TO_LLVM_BUILD=/usr/lib/llvm-${{ matrix.clang-runtime }}/
        # Ubuntu 16.04 & 18.04 & 20.04 llvm/clang-6.0 package is broken - install it from binary build.
        if [[ '${{ matrix.clang-runtime }}' == '6.0' ]]; then
          # Install clang-6.0 to run the plugin with.
          PATH_TO_LLVM_BUILD=/usr/lib/opt/llvm-${{ matrix.clang-runtime }}/
          sudo mkdir -p /usr/lib/opt
          pushd /usr/lib/opt
          sudo curl -L https://releases.llvm.org/6.0.1/clang+llvm-6.0.1-x86_64-linux-gnu-ubuntu-${UNIX_DISTRO}.tar.xz | sudo xz -d -c | sudo tar -x
          sudo rm -fr /usr/lib/clang*
          sudo mv clang+llvm-6.0.1-x86_64-linux-gnu-ubuntu-${UNIX_DISTRO}/ llvm-6.0/
          if [[ ! -f $PATH_TO_LLVM_BUILD/bin/FileCheck ]]; then
            sudo apt install llvm-6.0-dev llvm-6.0-tools
            sudo ln -s /usr/lib/llvm-6.0/bin/FileCheck $PATH_TO_LLVM_BUILD/bin/FileCheck
          fi
          popd
        fi
        # llvm-8-tools is broken as it depends on python2.7 we use FileCheck from llvm-7-tools
        if [[ '${{ matrix.clang-runtime }}' == '8' ]]; then
          if [[ ! -f $PATH_TO_LLVM_BUILD/bin/FileCheck ]]; then
            sudo apt install llvm-9-dev llvm-9-tools
            sudo ln -s /usr/lib/llvm-9/bin/FileCheck $PATH_TO_LLVM_BUILD/bin/FileCheck
          fi
        fi
        # Add -H to silence 'The directory '/home/..../pip/http' or its parent
        # directory is not owned by the current user and the cache has been disabled.
        pip3 install lit # LLVM lit is not part of the llvm releases...
        # We need PATH_TO_LLVM_BUILD later
        echo "PATH_TO_LLVM_BUILD=$PATH_TO_LLVM_BUILD" >> $GITHUB_ENV
    - name: Setup CUDA 8 on Linux
      if: ${{ matrix.cuda == true }}
      run: |     
        wget --no-verbose https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run 
        wget --no-verbose https://developer.nvidia.com/compute/cuda/8.0/Prod2/patches/2/cuda_8.0.61.2_linux-run
        sh ./cuda_8.0.61_375.26_linux-run --tar mxvf
        sudo cp InstallUtils.pm /usr/lib/x86_64-linux-gnu/perl-base
        export $PERL5LIB
        sudo sh cuda_8.0.61_375.26_linux-run --override --no-opengl-lib --silent --toolkit --kernel-source-path=/lib/modules/4.15.0-1113-azure/build 
        sudo sh cuda_8.0.61.2_linux-run --silent --accept-eula 
        export PATH=/usr/local/cuda-8.0/bin:${PATH} 
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda-8.0/lib64
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PATH=$PATH" >> $GITHUB_ENV
    - name: Setup code coverage
      if: ${{ (matrix.coverage == true) }}
      run: |
        sudo apt install lcov
        echo "CODE_COVERAGE=1" >> $GITHUB_ENV
        echo "BUILD_TYPE=Debug" >> $GITHUB_ENV
    - name: Display config
      run: |
        cmake --version
        $CC --version
        $CXX --version
        xz --version
        tar --version
        echo "Use Clang/LLVM in $PATH_TO_LLVM_BUILD"
        echo "Building clad in `[[ -z "$BUILD_TYPE" ]] && echo RelWithDebInfo || echo $BUILD_TYPE`"
        python3 --version
    - name: Build Clad
      if: ${{ matrix.coverity == false }}
      run: |
        mkdir obj && cd obj
        cmake -DClang_DIR="$PATH_TO_LLVM_BUILD" \
          -DLLVM_DIR="$PATH_TO_LLVM_BUILD" \
          -DCMAKE_BUILD_TYPE=$([[ -z "$BUILD_TYPE" ]] && echo RelWithDebInfo || echo $BUILD_TYPE) \
          -DCODE_COVERAGE=${CODE_COVERAGE}  \
          -DLLVM_EXTERNAL_LIT="`which lit`" \
          $GITHUB_WORKSPACE                 \
          ${{ matrix.extra_cmake_options }}

        cmake --build . -- -j4
    - name: Build Clad for Coverity Scan
      if: ${{ matrix.coverity == true }}
      run: |
        # FIXME: Ideally the check should be in the if: block of the action
        if [ "$BRANCH_NAME" == "coverity_scan" ]; then
          if [[ "${{ matrix.compiler }}" == "gcc-6" ]]; then
            mkdir obj && cd obj
            cmake -DClang_DIR="$PATH_TO_LLVM_BUILD" \
              -DLLVM_DIR="$PATH_TO_LLVM_BUILD" \
              -DCMAKE_BUILD_TYPE=$([[ -z "$BUILD_TYPE" ]] && echo RelWithDebInfo || echo $BUILD_TYPE) \
              $GITHUB_WORKSPACE
            cov-build --dir cov-out cmake --build .  -- -j4
          else
            echo "Coverity Scan can only be triggered for GCC 6. Fix Github Actions YAML"
            exit 1
          fi
        else
          echo "This action only runs on branch coverity_scan"
        fi
    - name: Test Clad
      run: |
        if [[ -d obj ]]; then
          cd obj
          cmake --build . --target check-clad -- -j4
          ctest -V
        fi
    - name: Failed job config
      if: ${{ failure() }}
      run: |
        export
        if [[ "runner.os" == "Linux" ]]; then
          apt-mark showhold
          dpkg-query -L libclang-${{ matrix.clang-runtime }}-dev
          dpkg-query -L clang-${{ matrix.clang-runtime }}
          dpkg-query -L llvm-${{ matrix.clang-runtime }}-dev
          find /usr/lib/llvm-${{ matrix.clang-runtime }}/
        fi
        if [[ "runner.os" == "macOS" ]]; then
          brew search llvm
          find /usr/local/opt/llvm@*/
        fi
        pip show lit
        cat obj/CMakeCache.txt
        cat obj/CMakeFiles/*.log
    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      timeout-minutes: 1 # When debugging increase to a suitable value!
    - name: Prepare code coverage report
      if: ${{ success() && (matrix.coverage == true) }}
      run: |
        # Create lcov report
        # capture coverage info
        vers="${CC#*-}"
        lcov --directory . --capture --output-file coverage.info --gcov-tool /usr/bin/gcov-${vers}
        # filter out system and extra files.
        # To also not include test code in coverage add them with full path to the patterns: '*/tests/*'
        lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' "$GITHUB_WORKSPACE"'/test/*' --output-file coverage.info
        # output coverage data for debugging (optional)
        lcov --list coverage.info

    - name: Upload to codecov.io
      if: ${{ success() && (matrix.coverage == true) }}
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.info

    - name: Upload report to coverity_scan
      if: ${{ success() && (matrix.coverity == true) }}
      run: |
        # FIXME: Ideally the check should be in the if: block of the action
        if [ "$BRANCH_NAME" == "coverity_scan" ]; then
          # Upload to coverity
          tar czvf clad.tgz cov-out
          # curl \
          #   --form project=vgvassilev/clad \
          #   --form token=$TOKEN \
          #   --form email=v.g.vassilev@gmail.com \
          #   --form file=@clad.tgz \
          #   --form version=trunk \
          #   --form description=""Clad build submitted via Travis CI"" \
          #   https://scan.coverity.com/builds?project=vgvassilev/clad
        else
          echo "This action only runs on branch coverity_scan"
        fi
      # env:
      #  TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
